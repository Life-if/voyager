const t=JSON.parse('{"key":"v-1273d2f2","path":"/blog/notion/python/%E6%9C%89%E5%85%B3%E7%B1%BB%E7%9A%84%E4%B8%80%E4%BA%9B%E7%9F%A5%E8%AF%86.html","title":"","lang":"zh-CN","frontmatter":{"description":"有关类的一些知识 因为python 的类的情况比起C++简单了很多，这里就只说一下有些需要注意的事情 私有与公有成员 __init__ 或者__xxx__ 是系统特殊成员（前后两条下划线） _xxx 是保护成员（前面一条下划线） __xxx 是私有成员，不能通过实例来访问（前面两条下划线） 调用私有成员是要使用装饰器 @property 装饰器 类方法 ( @classmethod ) Python中允许声明属于类本身的方法，即类方法。不对特定实例进行操作，不能访问对象的实例变量，第一个参数必须是类对象本身，通常为cls，但在调用时不需要也不用给该函数传值 静态方法 （@staticmethod) python 允许声明与类的对象实例无关的方法，称为静态方法，静态方法不对特定实例进行操作***，在静态方法中访问对象实例会导致错误****。可通过类名访问也可通过对象的实例化* 继承和多态 在继承中，子类要在括号内声明父类，父类的定义在子类其前面。在初始化过程中，子类不会自动调用父类的init","head":[["meta",{"property":"og:url","content":"https:// https://life-if-forever.gitee.io/voyager/voyager/blog/notion/python/%E6%9C%89%E5%85%B3%E7%B1%BB%E7%9A%84%E4%B8%80%E4%BA%9B%E7%9F%A5%E8%AF%86.html"}],["meta",{"property":"og:site_name","content":"博客演示"}],["meta",{"property":"og:description","content":"有关类的一些知识 因为python 的类的情况比起C++简单了很多，这里就只说一下有些需要注意的事情 私有与公有成员 __init__ 或者__xxx__ 是系统特殊成员（前后两条下划线） _xxx 是保护成员（前面一条下划线） __xxx 是私有成员，不能通过实例来访问（前面两条下划线） 调用私有成员是要使用装饰器 @property 装饰器 类方法 ( @classmethod ) Python中允许声明属于类本身的方法，即类方法。不对特定实例进行操作，不能访问对象的实例变量，第一个参数必须是类对象本身，通常为cls，但在调用时不需要也不用给该函数传值 静态方法 （@staticmethod) python 允许声明与类的对象实例无关的方法，称为静态方法，静态方法不对特定实例进行操作***，在静态方法中访问对象实例会导致错误****。可通过类名访问也可通过对象的实例化* 继承和多态 在继承中，子类要在括号内声明父类，父类的定义在子类其前面。在初始化过程中，子类不会自动调用父类的init"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-11-25T13:35:18.000Z"}],["meta",{"property":"article:author","content":"Voyager"}],["meta",{"property":"article:modified_time","content":"2023-11-25T13:35:18.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-11-25T13:35:18.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Voyager\\",\\"url\\":\\"https://life-if-forever.gitee.io/voyager\\"}]}"]]},"headers":[{"level":3,"title":"有关类的一些知识","slug":"有关类的一些知识","link":"#有关类的一些知识","children":[]}],"git":{"createdTime":1700919318000,"updatedTime":1700919318000,"contributors":[{"name":"Voyager","email":"1241512309@qq.com","commits":1}]},"readingTime":{"minutes":1.42,"words":426},"filePathRelative":"blog/notion/python/有关类的一些知识.md","localizedDate":"2023年11月25日","excerpt":"<h3> 有关类的一些知识</h3>\\n<p>因为python 的类的情况比起C++简单了很多，这里就只说一下有些需要注意的事情</p>\\n<ul>\\n<li>\\n<p><strong>私有与公有成员</strong></p>\\n<div class=\\"language-python line-numbers-mode\\" data-ext=\\"py\\"><pre class=\\"language-python\\"><code>__init__  或者__xxx__  是系统特殊成员（前后两条下划线）\\n_xxx 是保护成员（前面一条下划线）\\n__xxx 是私有成员，不能通过实例来访问（前面两条下划线）\\n调用私有成员是要使用装饰器 @<span class=\\"token builtin\\">property</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div></li>\\n<li>\\n<p><strong>装饰器</strong></p>\\n<ul>\\n<li>\\n<p>类方法 ( @classmethod )</p>\\n<p>Python中允许声明属于类本身的方法，即类方法。<em><strong>不对特定实例进行操作，不能访问对象的实例变量</strong></em>，第一个参数必须是类对象本身，<em><strong>通常为cls</strong></em>，但在调用时不需要也<em><strong>不用给该函数传值</strong></em></p>\\n</li>\\n<li>\\n<p>静态方法 （@staticmethod)</p>\\n<p>python 允许声明与类的对象实例无关的方法，称为静态方法，静态方法不对特定实例进行操作***，在静态方法中访问对象实例会导致错误****。<strong>可通过类名访问也可通过对象的实例化</strong>*</p>\\n</li>\\n</ul>\\n</li>\\n<li>\\n<p><strong>继承和多态</strong></p>\\n<p>在继承中，子类要在括号内声明父类，父类的定义在子类其前面。在初始化过程中，子类不会自动调用父类的<strong>init</strong></p>\\n</li>\\n</ul>","autoDesc":true}');export{t as data};
