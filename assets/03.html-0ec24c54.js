import{_ as n,o as s,c as e,f as a}from"./app-c8122758.js";const o={},c=a(`<h2 id="_1-3-1-比较运算符和逻辑运算符的优先级和结合性" tabindex="-1"><a class="header-anchor" href="#_1-3-1-比较运算符和逻辑运算符的优先级和结合性" aria-hidden="true">#</a> 1.3.1 比较运算符和逻辑运算符的优先级和结合性</h2><ul><li><p><strong>比较运算符的优先级低于算数运算符</strong>，所有比较运算符优先级相同</p></li><li><p>逻辑运算符中 <code>not</code> 优先级最高，<strong>但低于比较运算符</strong>；<code>or</code> 的优先级最低；<code>and</code> 介于二者之间</p></li></ul><h2 id="_1-3-2-程序控制和短路求值" tabindex="-1"><a class="header-anchor" href="#_1-3-2-程序控制和短路求值" aria-hidden="true">#</a> 1.3.2 程序控制和短路求值</h2><p>在 Python 的逻辑控制中，逻辑运算得到的“真”和“假”并不一定是 <code>True</code> 或者 <code>False</code>，<strong>也有可能是其他类型</strong>。</p><p>例如：<code>3 and 0</code> 的值是整数 <code>0</code>；<code>0 or &#39;abc&#39;</code> 得到的是字符串 <code>&#39;abc&#39;</code></p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>Python 语言和 C 语言的短路逻辑基本相同，但是值得注意的是：在 Python 中，逻辑为假的情况包括以下几种情况：</p><ul><li>数值类型的0值</li><li>None</li><li><strong>空表、空元组、空字典、空集合</strong></li></ul></div><h2 id="_1-3-3-循环逻辑" tabindex="-1"><a class="header-anchor" href="#_1-3-3-循环逻辑" aria-hidden="true">#</a> 1.3.3 循环逻辑</h2><p>循环逻辑中，常见的关键字是 <code>for</code>、<code>while</code>、<code>break</code>、<code>continue</code>。用法与 C 语言中相同。</p><p>但是值得注意的是，在这个过程中有时候也会用到 <code>else</code> 关键字。</p><p><code>else</code> 关键字会在 <code>for</code>、<code>while</code>正常结束的时候运行。换句话说，只要没有遇到 <code>break</code> 或者 <code>return</code> ，<code>for</code> 完成了所有迭代值的迭代，或者<code>while</code>遇到了逻辑假，解释器就会运行后面 <code>else</code> 部分的逻辑。</p><div class="hint-container warning"><p class="hint-container-title">注意</p><p>对于 <code>for</code> 语句，循环只会在开始的时候求一次值。比如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>n<span class="token operator">=</span><span class="token number">3</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
  <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token operator">**</span><span class="token number">3</span><span class="token punctuation">)</span>
  n<span class="token operator">=</span>n<span class="token operator">+</span><span class="token number">3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>虽然循环体内修改了n，但是并不会影响循环体内本来的循环次数</strong></p></div><div class="hint-container danger"><p class="hint-container-title">警告</p><p>但是对于一些<strong>组合对象</strong>来说，在 <code>for</code> 语句内改变循环对象将会是一个非常危险的事情。比如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>n<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> n<span class="token punctuation">:</span>
  <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token operator">**</span><span class="token number">3</span><span class="token punctuation">)</span>
  n<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token operator">**</span><span class="token number">2</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这段代码将会一直循环下去的❗❗❗😫</p><p>参考之前的例子，因为在之前的过程中，<code>range(n)</code> 起作用的是它一开始返回的程序地址里面的对象（值），所以循环过程中即便修改了 <code>n</code> 也对已经返回的程序地址里面的值没有影响。而组合对象则是一个对于程序地址的引用，因此在循环过程中修改了程序地址里面的值，自然就无穷循环了。同样的，<code>enumerate</code> 也会有类似的循环情况。(<mark>个人理解，具体底层部分会在第三章进行简要介绍</mark>)</p><p><strong>因此，在对含有组合对象的值进行操作的时候一定要慎重。</strong></p></div>`,12),t=[c];function p(d,i){return s(),e("div",null,t)}const l=n(o,[["render",p],["__file","03.html.vue"]]);export{l as default};
