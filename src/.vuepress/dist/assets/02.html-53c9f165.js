import{_ as n,o as s,c as a,f as t}from"./app-745f9f7a.js";const e={},o=t(`<p>💣本节讨论的是 Python 的抽象模型，内容有点像编译原理，这里挑重点介绍一下。</p><h2 id="_3-2-1-环境和状态" tabindex="-1"><a class="header-anchor" href="#_3-2-1-环境和状态" aria-hidden="true">#</a> 3.2.1 环境和状态</h2><h3 id="a-环境" tabindex="-1"><a class="header-anchor" href="#a-环境" aria-hidden="true">#</a> a. 环境</h3><p>在启动 Python 解释器后，环境中就已经对标准函数名和标准类型名有了定义（比如：<code>True</code>、<code>float</code>、<code>id</code>等）。环境启动后就能找到它们和它们的关联值。</p><p>如果一个名字在 Python 解释器中没有赋值，也没有定义为函数名，则说这个名字<strong>无定义</strong>。但是一但满足了上面的几点之一就有了定义。这说明 Python 解释器时刻记得哪些名字有定义，这些信息记录在环境中，环境是程序运行的基础。</p><p>显然，程序运行的环境可能随着程序中语句的执行而发生变化。环境的功能类似于一个字典，每个名字都有其映射。<strong>如果明确要删除某个已有定义。则可以使用代码<code>del xxx</code>来删除<code>xxx</code>。<code>xxx</code>可以是变量，也可以是可变序列的元素或切片、字典的关联、对象属性等。</strong></p><div class="hint-container danger"><p class="hint-container-title">警告</p><p>千万不要手贱尝试<code>del</code>系统内置空间变量，如果不想重装的话。😫</p></div><h3 id="b-状态" tabindex="-1"><a class="header-anchor" href="#b-状态" aria-hidden="true">#</a> b. 状态</h3><p>对环境中有定义的变量，我们能取得其值，而具体得到什么值则由在此之前执行的语句决定。在程序执行中的每个时刻，所有有定义的名字及其关联值，构成了当时的<strong>程序执行状态</strong>(简称<strong>程序状态</strong>或<strong>状态</strong>)。</p><p>用前面的比喻，如果环境对应于一个字典，状态就是该字典在某个时刻的具体情况:存在哪些关键码，它们的关联值是什么。</p><h2 id="_3-2-2-程序执行中的环境和状态变化" tabindex="-1"><a class="header-anchor" href="#_3-2-2-程序执行中的环境和状态变化" aria-hidden="true">#</a> 3.2.2 程序执行中的环境和状态变化</h2><p>实际上.造成环境变化的最重要情况是函数调用。</p><p>首先应当知道什么是 <strong>命名空间（namespace）</strong>。这个名词在 C++ 中也有重要的作用。简单来说就是记录了一组有定义的名字，是运行时的动态概念（相对于静态概念的【作用域】）。</p><p>那么了解了命名空间，就能把环境和环境变化的情况说清楚了。解释器启动建立的初始环境里有一个 <strong>内置命名空间（built-in namespace）</strong>。其中记录了所有准常量名、标准函数名和标准类型名、各种错误的名字，以及它们的关联，再建立一个<strong>全局名字空间</strong>作为当前名字空间(对应于全局作用域)，然后等待用户输入。</p><p>标准函数<code>dir()</code>返回指定名字空间里的名字(字符串)表，默认为当前名字空间，如在解释器后立刻执行<code>dir()</code>，可以看到下面的情况：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">dir</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">[</span><span class="token string">&#39;__annotations__&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;__builtins__&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;__doc__&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;__loader__&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;__name__&#39;</span><span class="token punctuation">,</span> 
<span class="token string">&#39;__package__&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;__spec__&#39;</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中的<code>&#39;__builtins__&#39;</code>就是预定义的内置命名空间。</p><p>程序启动后的环境两个空间里有定义的名字都可以使用，但使用有顺序:<strong>先查看当前名字空间</strong>。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token assign-left variable">print</span><span class="token operator">=</span><span class="token number">3</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> print<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>
Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span>:
  File <span class="token string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="token number">1</span>, <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">&gt;</span>
TypeError: <span class="token string">&#39;int&#39;</span> object is not callable
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> __builtins__.print<span class="token punctuation">(</span>print<span class="token punctuation">)</span>
<span class="token number">3</span>
</code></pre><div class="highlight-lines"><div class="highlight-line"> </div><br><br><br><br><div class="highlight-line"> </div><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>遇到函数调用时，解释器将为其创建一个新的局部名字空间，设定该名字空间与其外围的联系(以被调函数的定义所在作用域的名字空间为外围)。然后把这个新名字空间作为当前名字空间，在新环境中执行函数体。函数退出时抛弃为其建立的名字空间，环境恢复调用前的局面，在恢复的环境中继续执行随后操作。<strong>所以在函数内改变外界值的时候要注意局部作用域和全局作用域的作用范围。</strong></p>`,20),p=[o];function i(c,r){return s(),a("div",null,p)}const d=n(e,[["render",i],["__file","02.html.vue"]]);export{d as default};
