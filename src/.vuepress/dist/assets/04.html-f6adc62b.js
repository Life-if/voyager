import{_ as n,o as e,c as s,f as a}from"./app-745f9f7a.js";const t={},o=a(`<h2 id="_1-4-1-参数检查和断言" tabindex="-1"><a class="header-anchor" href="#_1-4-1-参数检查和断言" aria-hidden="true">#</a> 1.4.1 参数检查和断言</h2><ul><li><p>标准函数 <code>isinstance(x,t)</code> 是用于对 <code>x</code>的类型是否为 <code>t</code> 的检查。</p></li><li><p><code>assert 条件</code> 或者 <code>assert 条件 表达式</code> 可以用于调试，若条件为真，则继续运行；否则返回 <code>AssertionError</code></p></li></ul><h2 id="_1-4-2-函数递归深度限制-重要" tabindex="-1"><a class="header-anchor" href="#_1-4-2-函数递归深度限制-重要" aria-hidden="true">#</a> 1.4.2 函数递归深度限制（重要）</h2><p><strong>Python 对程序执行中的递归调用深度有默认限制</strong></p><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>如果需要迭代的很深，可以考虑通过 <code>sys</code> 标准函数库中的 <code>getrecursionlimit()</code> 检查系统调用深度的上限，然后通过 <code>setrecursionlimit(n)</code> 重新设置深度为 <code>n</code> 。</p></div><h2 id="_1-4-3-时间统计" tabindex="-1"><a class="header-anchor" href="#_1-4-3-时间统计" aria-hidden="true">#</a> 1.4.3 时间统计</h2><p>标准库包 <code>timeit</code> 可以方便的完成各种计时（实际上 <code>time</code> 也还可以做到。）</p><p>另外，<code>cProfile</code> 和 <code>profile</code> 可以用来统计程序中各部分的耗时。这些都是很有用的工具。</p><h2 id="_1-4-4-模拟随机" tabindex="-1"><a class="header-anchor" href="#_1-4-4-模拟随机" aria-hidden="true">#</a> 1.4.4 模拟随机</h2><p>对于随机数的模拟，标准库包 <code>random</code> 提供了一些和随机数有关的功能。</p><table><thead><tr><th style="text-align:center;">函数</th><th style="text-align:center;">参数说明</th><th style="text-align:center;">功能说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>random()</code></td><td style="text-align:center;">---</td><td style="text-align:center;">返回<code>[0,1)</code>中的一个随机浮点数（随机分布）</td></tr><tr><td style="text-align:center;"><code>normal(loc,scale,size)</code></td><td style="text-align:center;"><code>loc</code>为正态分布均值，<code>scale</code>为标准差，<code>size</code>为生成数据的数量</td><td style="text-align:center;">返回指定正态分布的随机数</td></tr><tr><td style="text-align:center;"><code>choice(s)</code></td><td style="text-align:center;"><code>s</code>为字符串</td><td style="text-align:center;">从字符串中随机取一个字符（平均分布）</td></tr><tr><td style="text-align:center;"><code>randrange([start,] stop [,step])</code></td><td style="text-align:center;"><code>start</code> 指定返回开始值，<code>stop</code> 指定范围结束值（不包含范围内），<code>step</code> 递增基数</td><td style="text-align:center;">平均概率返回范围内整数</td></tr><tr><td style="text-align:center;"><code>seed(n)</code></td><td style="text-align:center;"><code>n</code> 为整数</td><td style="text-align:center;">随机数种子设定</td></tr></tbody></table><br><p>另外，对于<strong>通用随机试验模拟函数</strong>的设计模板如下：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">normal_test_function</span><span class="token punctuation">(</span>test<span class="token punctuation">,</span>num<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&#39;&#39;&#39;
    test: 测试随机函数的函数
    num: 试验次数
    &#39;&#39;&#39;</span>
    passed <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>nun<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> test<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            passed <span class="token operator">+=</span> <span class="token number">1</span>
    <span class="token keyword">return</span> passed<span class="token operator">/</span>num
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_1-4-5-函数参数和匿名函数" tabindex="-1"><a class="header-anchor" href="#_1-4-5-函数参数和匿名函数" aria-hidden="true">#</a> 1.4.5 函数参数和匿名函数</h2><p>有时，函数会作为参数传递给另一个函数。这种参数称为<strong>函数的函数参数</strong>，以函数作为操作对象的函数被称为<strong>高阶函数</strong>。</p><p>而有的时候，既创建函数又给予命名有的时候并没有必要，因此可以考虑<strong>匿名函数</strong> <code>lambda</code>。</p><p><code>lambda</code>表达式是一种用于描述小函数的匿名函数。其用法如下：<br><code>lambda 参数,…: 表达式</code><br> 比如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">,</span>y<span class="token punctuation">:</span>x<span class="token operator">**</span><span class="token number">2</span><span class="token operator">+</span>y<span class="token operator">**</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="hint-container warning"><p class="hint-container-title">注意</p><p>由于优先级问题，<code>lambda</code> 表达式必须加括号使用</p></div><h2 id="_1-4-6-作用域和函数嵌套问题-重要" tabindex="-1"><a class="header-anchor" href="#_1-4-6-作用域和函数嵌套问题-重要" aria-hidden="true">#</a> 1.4.6 作用域和函数嵌套问题（重要）</h2><p>Python 中的一个基本规则是 <strong>赋值即定义</strong>。于是有了以下的使用方法：</p><ul><li><p><strong>赋值即定义</strong>。因此局部定义会遮蔽外围作用域中同名的已有定义。</p></li><li><p>局部作用域没有定义的变量，外部作用域的同名变量会在局部作用域内发挥作用。</p></li><li><p>如果想要在局部作用域指定使用全局作用域中的变量，可以通过<code>global</code> 声明变量。解释器会记录内部使用信息，无论是否对他们赋值。</p></li><li><p>如果将 <code>x</code> 声明为全局变量（<code>global</code>），但是全局空间中没有该变量，那么解释器会把 <code>x</code> 加进全局空间并完成赋值。</p></li><li><p>如果内部函数定义里修改外围变量（不是全局变量），则需要使用 <code>nonlocal</code></p></li></ul><div class="hint-container tip"><p class="hint-container-title">提示</p><p><code>global</code> 的使用是在整个局部作用域内的，所以如果有下面的情况，程序会报错。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>x<span class="token operator">=</span><span class="token number">100</span>
<span class="token keyword">def</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    x<span class="token operator">=</span><span class="token number">9</span>
    <span class="token keyword">global</span> x
    x<span class="token operator">=</span>x<span class="token operator">+</span><span class="token number">1</span>
f<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>报错内容为：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>SyntaxError: name <span class="token string">&#39;x&#39;</span> is used prior to global declaration
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>nonlocal</code> 也是同理。换而言之，<strong>二者的声明必须在本作用域使用之前。</strong></p></div>`,24),c=[o];function d(l,i){return e(),s("div",null,c)}const r=n(t,[["render",d],["__file","04.html.vue"]]);export{r as default};
