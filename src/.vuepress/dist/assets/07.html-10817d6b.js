import{_ as n,o as s,c as a,f as e}from"./app-6c152e92.js";const o={},p=e(`<h2 id="数据持久性" tabindex="-1"><a class="header-anchor" href="#数据持久性" aria-hidden="true">#</a> 数据持久性</h2><p>在实际中，许多程序(应用系统)都需要持久性地保存程序运行中构造和积累的复杂数报对象，还要把保存的数据重新读入，恢复原对象。这是一套很常用而且比较规范的工作，编系统应该提供支持，以方便程序开发者的工作。</p><p>Python 通过标准库提供了几种<strong>数据持久性库</strong>，详情见标准库手册的第 12 章(Data Persistence)。不同库的功能有些差异，读者可以自己阅读和比较。下面介绍其中使用较方便的一个库(但不是功能最强的) <code>pickle</code> ，它足以应付很多实际需要。</p><p><code>pickle</code>用<strong>二进制文件</strong>存储数据，以避免输入输出中数转换的计算开销和可能误差(得数转换可能会产生误差)，也使存储更密集，少占用外存空间。</p><p>使用示例如下(本人没试过啊😏截止发文前我用的更多的是数据库🥂)：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>outf <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&#39;phonebook.pickle&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;wb&#39;</span> <span class="token punctuation">)</span>    <span class="token comment"># 二进制写模式打开文件</span>
pickle<span class="token punctuation">.</span>dump<span class="token punctuation">(</span>phonebook，outf<span class="token punctuation">)</span>   <span class="token comment"># 把对象 phonebook 卸载到文件</span>
outf<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>

inf <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&#39;phonebook.pickle&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;rb&#39;</span><span class="token punctuation">)</span>    <span class="token comment"># 二进制读模式打开文件</span>
phonebook <span class="token operator">=</span> pickle<span class="token punctuation">.</span>load<span class="token punctuation">(</span>inf<span class="token punctuation">)</span> <span class="token comment"># 把重建的对象赋给 phonebook</span>
inf<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为保证<code>dump</code>和<code>load</code>能正确保存和恢复，开发者为<code>pickle</code>包定义了若套协议。调用<code>dump</code>作时可以指定具体协议，这里不讨论细节了。不指定时默认使用功能最强的协议。调用<code>load</code>时，该雨数能自动识别被装入的<code>pickle</code>文件使用的协议。一般情况下采用默认方式就可以。<code>pickle</code>还支精多个对象一个个地<code>dump</code>到同一个文件里，而后可以用<code>load</code>逐一恢复为对象，赋值给不同的变量。</p>`,7),c=[p];function t(i,l){return s(),a("div",null,c)}const u=n(o,[["render",t],["__file","07.html.vue"]]);export{u as default};
