import{_ as s,o as n,c as t,f as a}from"./app-6c152e92.js";const e={},i=a(`<h2 id="_2-3-1-字符串常用函数" tabindex="-1"><a class="header-anchor" href="#_2-3-1-字符串常用函数" aria-hidden="true">#</a> 2.3.1 字符串常用函数</h2><h3 id="a-分类谓词" tabindex="-1"><a class="header-anchor" href="#a-分类谓词" aria-hidden="true">#</a> a. 分类谓词</h3><p>分类谓词指的是判断串中所有字符是否满足条件的方法，满足返回 True.</p><table><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td>s.isupper()</td><td>s不空且其中所有存在大小写的字符都是大写</td></tr><tr><td>s.islower()</td><td>s不空且其中所有存在大小写的字符都是小写</td></tr><tr><td>s.isdigit()</td><td>s不空且其中所有字符都是数字</td></tr><tr><td>s.isalpha()</td><td>s不空且其中所有字符都是字母</td></tr><tr><td>s.isidentifier()</td><td>s不空且其形式可以作为标识符</td></tr><tr><td>s.isspace()</td><td>s不空且其中全是空白字符(空格、制表符、换行符)</td></tr></tbody></table><h3 id="b-生成字符串操作" tabindex="-1"><a class="header-anchor" href="#b-生成字符串操作" aria-hidden="true">#</a> b. 生成字符串操作</h3><table><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td>s.lower()</td><td>做 s 的全小写<strong>拷贝</strong>(原为大写的改为小写，其他不变)</td></tr><tr><td>s.upper()</td><td>做 s 的全大写拷贝</td></tr><tr><td>s.capitalize()</td><td>做 s 的首字符大写其余小写的拷贝</td></tr><tr><td>s.swapcase()</td><td>做 s 的大小写调换的拷贝</td></tr></tbody></table><h3 id="c-常用函数操作" tabindex="-1"><a class="header-anchor" href="#c-常用函数操作" aria-hidden="true">#</a> c. 常用函数操作</h3><table><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td>s.find (sub[,start[,end]])</td><td>参数sub是另一个串。此方法查找并返回sub在s里第一次出现的位置，未出现时返回-1;</td></tr><tr><td>s.replace(old,new[,count])</td><td>建立字符串s的一个拷贝，其中把s里子串old 的所有出现都替换成另一个串new（只做前 count 个替换）</td></tr><tr><td>s.strip(chars=&#39; &#39;)</td><td>删去 s 两端属于 chars 的所有字符</td></tr><tr><td>s.lstrip(chars=&#39; &#39;)</td><td>删去 s 左端属于 chars 的所有字符</td></tr><tr><td>s.rstrip(chars=&#39; &#39;)</td><td>删去 s 右端属于 chars 的所有字符</td></tr></tbody></table><div class="hint-container tip"><p class="hint-container-title">提示</p><p><strong><code>find()</code>和 <code>index()</code> 的区别：</strong> 在未找到参数字符串的时候，<code>find()</code> 返回 -1，而<code>index()</code> 报错。</p></div><h3 id="d-字符串与表" tabindex="-1"><a class="header-anchor" href="#d-字符串与表" aria-hidden="true">#</a> d. 字符串与表</h3><table><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td>s.split(sep=None， maxsplit=-1)</td><td>返回切分 s 得到的子串的表。参数 sep 指定切分串，默认为空白字符段，丢掉 s 两头的空白字符。maxsplit 指定(从左向右的)最大切分项数，剩下的串作为表里最后一个元素。默认为完成全部切分。</td></tr><tr><td>s.rsplit(sep=None， maxsplit=-1)</td><td>从右到左切分。显然只在指定切分项数时才有意义，否则等同于 split.</td></tr><tr><td>s.splitlines([keepends])</td><td>返回 s 里正文行的表(按行切分)。无参时子串不包含换行符,参数 keepends 的值为 True 时保留换行符。</td></tr><tr><td>sep.join(list1)</td><td>以串 sep 为分隔符把表 list1 的元素 (应是一些字符) 拼接为一个串</td></tr></tbody></table><h3 id="e-原始字符串" tabindex="-1"><a class="header-anchor" href="#e-原始字符串" aria-hidden="true">#</a> e. 原始字符串</h3><p>有的时候需要减少换意序列的出现（比如在写存储地址的时候）。因此，Python 引进原始字符串的字面量形式，用字符 <code>r</code> 或 <code>R</code> 作为引导字符。在这种字面量里，反斜线符号被看作普通字符，下面是几个例子:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> r<span class="token string">&#39;ab\\ncd!&#39;</span>
<span class="token string">&#39;ab\\\\ncd!&#39;</span>

<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> r<span class="token string">&quot;abd<span class="token entity" title="\\&quot;">\\&quot;</span>can”
&#39;abd<span class="token entity" title="\\\\">\\\\</span>&quot;</span>can<span class="token string">&#39;

&gt;&gt;&gt; len(r&#39;</span>abd<span class="token punctuation">\\</span>&#39;can&#39;<span class="token punctuation">)</span>
<span class="token number">8</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-3-2-字符串的格式化" tabindex="-1"><a class="header-anchor" href="#_2-3-2-字符串的格式化" aria-hidden="true">#</a> 2.3.2 字符串的格式化</h2><div class="hint-container tip"><p class="hint-container-title">提示</p><p><strong><code>str()</code> 和 <code>repr()</code> 区别</strong>：<code>str()</code> 和 <code>repr()</code> 都是 Python 中的内置函数，用于将对象转换为字符串。它们之间的主要区别在于生成的字符串表示形式。<code>str()</code>会将内容转化成为适合人阅读的前端样式文本。将对象转化为供解释器读取的形式。返回一个对象的 <code>string</code> 格式。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>s<span class="token operator">=</span><span class="token string">&#39;123avs{:&gt;10.6f}&#39;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token number">3.14159265451234</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># 123avs  3.141593</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">repr</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># &#39;123avs  3.141593&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><h3 id="a-字符串的对齐和填充" tabindex="-1"><a class="header-anchor" href="#a-字符串的对齐和填充" aria-hidden="true">#</a> a.字符串的对齐和填充</h3><p>对于字符串的对其一般会采用如下的几种方法：</p><table><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td>s.center(n, sep=&#39;&#39;)</td><td>得到将 s 串居中的长度为 n 的字符串(用sep填充)</td></tr><tr><td>s.ljust(n, sep=&#39;&#39;)</td><td>得到将 s 串居左的长度为 n 的字符串(用sep填充)</td></tr><tr><td>s.rjust(n, sep=&#39;&#39;)</td><td>得到将 s 串居右的长度为 n 的字符串(用sep填充)</td></tr></tbody></table><h3 id="b-格式化输出" tabindex="-1"><a class="header-anchor" href="#b-格式化输出" aria-hidden="true">#</a> b.格式化输出</h3><p>Python 中有两套格式化机制。其中 <code>format</code> 方法是最新的，使用的也更加频繁，即使用 <code>str.format(*args,**kwargs)</code>；另一套则是继承自 C 语言，即通过 % 实现的。下面是一些使用示例，一看就懂。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># &#39;Youth is not a period of time, it is a state of mind.&#39;</span>
<span class="token comment"># Function 1</span>
<span class="token string">&#39;{} is not a period of time, it is a state of {}.&#39;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token string">&#39;Youth&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;mind&#39;</span><span class="token punctuation">)</span>
<span class="token comment"># Function 2</span>
<span class="token string">&#39;{1} is not a period of time, it is a state of {0}.&#39;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token string">&#39;mind&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;Youth&#39;</span><span class="token punctuation">)</span>
<span class="token comment"># Function 3 (即说明可以混用)</span>
<span class="token string">&#39;{name} is not a period of time, it is a state of {}.&#39;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token string">&#39;mind&#39;</span><span class="token punctuation">,</span>name<span class="token operator">=</span><span class="token string">&#39;Youth&#39;</span><span class="token punctuation">)</span>
<span class="token comment"># Function 4</span>
<span class="token string">&#39;%s is not a period of time, it is a state of %s.&#39;</span><span class="token operator">%</span><span class="token punctuation">(</span><span class="token string">&#39;Youth&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;mind&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当然如果需要输入的变量已经提前通过变量命名的话也可以采用 <code>f-string</code> 的方法来处理，其使用方法是在字符串前面标记 <code>f</code>。如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>name <span class="token operator">=</span> <span class="token string">&#39;Youth&#39;</span>
number <span class="token operator">=</span> <span class="token number">1</span>
<span class="token string-interpolation"><span class="token string">f&#39;</span><span class="token interpolation"><span class="token punctuation">{</span>name<span class="token punctuation">}</span></span><span class="token string"> is not a period of time, it is a state of </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token number">1</span><span class="token operator">+</span>number<span class="token punctuation">}</span></span><span class="token string">&#39;</span></span>
<span class="token comment"># 输出：&#39;Youth is not a period of time, it is a state of 2&#39;</span>
</code></pre><div class="highlight-lines"><br><br><div class="highlight-line"> </div><div class="highlight-line"> </div></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于字符的调整，一般来说是在 <code>{}</code>内设置，设置的格式为 <code>: 转换描述</code>。其中 <em>转换描述</em> 必须按照下面的顺序描述。</p><ul><li><p>描述对齐方式的字符 <code>&lt;</code>、<code>&gt;</code>或<code>^</code>，分别要求把替换内容在特定范围内<strong>居左</strong>、<strong>居右</strong>或<strong>居中</strong>摆放。对齐字符<strong>之前</strong>可以有一个填充字符，实参产生的串不够长时用它填充，默认用空格填充。无对齐描述时字符串居左对齐，数值居右对齐。</p></li><li><p>表示本替换域最小宽度的整数。如果实际替换内容包含更多字符，将根据实际需要决定宽度。默认是根据实际需要确定替换域的宽度。</p></li><li><p>表示转换类型的字符如下表所示。</p></li></ul><table><thead><tr><th style="text-align:center;">字符</th><th style="text-align:center;">功能</th></tr></thead><tbody><tr><td style="text-align:center;">s</td><td style="text-align:center;">表示字符串</td></tr><tr><td style="text-align:center;">d</td><td style="text-align:center;">要求生成十进制形式的整数表示</td></tr><tr><td style="text-align:center;">f F</td><td style="text-align:center;">要求生成浮点数形式，字符前可有一个圆点和一个整数，说明浮点数表示中的小数位数(精度)，默认为6位。</td></tr><tr><td style="text-align:center;">e E</td><td style="text-align:center;">要求生成科学记数形式</td></tr><tr><td style="text-align:center;">g G</td><td style="text-align:center;">要求解释器根据情况自动选择浮点形式或科学形式</td></tr></tbody></table><p>在转换描述之前，还可以有一个叹号和一个字符说明所用转换函数，<code>!s</code> 表示用 <code>str()</code> 转换(为默认方式)，<code>!r</code> 表示用 <code>repr()</code> 转换，<code>!a</code> 表示用 <code>ascii()</code> 转换。</p><p>下面是一些例子：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;{:-&gt;10s}&#39;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token string">&#39;100&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment"># -------100</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;{!r:-&gt;10s}&#39;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token string">&#39;100&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment"># &quot;-----&#39;100&#39;&quot;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;{:-&gt;10s}&#39;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment"># 报错</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,30),o=[i];function p(d,c){return n(),t("div",null,o)}const l=s(e,[["render",p],["__file","03.html.vue"]]);export{l as default};
