const n=JSON.parse(`{"key":"v-68cab477","path":"/blog/notion/python/pandas%E7%9A%84%E4%BD%BF%E7%94%A8.html","title":"","lang":"zh-CN","frontmatter":{"description":"pandas的使用 DataFrame的使用 列表产生 import plotly as py from plotly import figure_factory as ff import pandas as pd pyplt=py.offline.plot # 离线模式 data=pd.DataFrame([[\\"20191001730\\",\\"kx\\",\\"4.00\\"], [\\"20191000456\\",\\"fgy\\",\\"1.00\\"] ], columns=(\\"学号\\",\\"姓名\\",\\"成绩\\")) #表头 table=ff.create_table(data) #用plotly输出表格 pyplt(table,show_link=False) 处理结果： 字典产生 import plotly as py from plotly import figure_factory as ff import pandas as pd pyplt=py.offline.plot # 离线模式 data=pd.DataFrame({'学号':['201910010288','20191001730','201011192983'], '专业':['计算机系','金融系'，'空间系'],'成绩':[66,99,120]}) #表头 table=ff.create_table(data) #用plotly输出表格 pyplt(table,show_link=False) 处理结果： ​ 对一些用法的说明 函数 用法 data.at[行，列] 找到位置 data.iloc[0] 第一行的信息 data['xxx'] 'xxx'列的信息 用Pandas读写各种类型的文件 读取csv和表格 读：read_csv() 写：to_csv() read_csv()常用参数 参数 含义 sep/delimiter 列分隔符 header 列名，如果有自己的列名列表，传递None index_col 作为索引的列名 skiprows 要跳过的文件头行数 na_values 用于处理缺失数据的字符串 encoding 字符编码方式 举例： (GB2312是中国制定的中文编码，GBK是GB2312的拓展，CP936是在GB2312的基础上开发的汉字编码) import plotly as py from plotly import figure_factory as ff import pandas as pd import plotly.graph_objs as pygo pyplt=py.offline.plot # 离线模式 data=pd.read_csv('score.csv',encoding='GBK') #读取 table=ff.create_table(data) #用plotly输出表格 pyplt(table,show_link=False) 写网页文件 基本和上一个相同 import plotly as py from plotly import figure_factory as ff import pandas as pd import plotly.graph_objs as pygo pyplt=py.offline.plot # 离线模式 data=pd.read_csv('score.csv',encoding='GBK') #读取 table=ff.create_table(data) #用plotly输出表格 pyplt(table,filename='scoregp.html',show_link=False) 读写EXCAL 读：read_excal('文件名') 写：to_excal(‘文件名’) import plotly as py from plotly import figure_factory as ff import pandas as pd import plotly.graph_objs as pygo pyplt=py.offline.plot # 离线模式 data=pd.read_excel('score.xlsx') #读取 data['总评']=data['成绩']/120*65 data.to_excel('score.xlsx',index=0) 没有index=0： 有index=0：","head":[["meta",{"property":"og:url","content":"https:// https://life-if-forever.gitee.io/voyager/voyager/blog/notion/python/pandas%E7%9A%84%E4%BD%BF%E7%94%A8.html"}],["meta",{"property":"og:site_name","content":"博客演示"}],["meta",{"property":"og:description","content":"pandas的使用 DataFrame的使用 列表产生 import plotly as py from plotly import figure_factory as ff import pandas as pd pyplt=py.offline.plot # 离线模式 data=pd.DataFrame([[\\"20191001730\\",\\"kx\\",\\"4.00\\"], [\\"20191000456\\",\\"fgy\\",\\"1.00\\"] ], columns=(\\"学号\\",\\"姓名\\",\\"成绩\\")) #表头 table=ff.create_table(data) #用plotly输出表格 pyplt(table,show_link=False) 处理结果： 字典产生 import plotly as py from plotly import figure_factory as ff import pandas as pd pyplt=py.offline.plot # 离线模式 data=pd.DataFrame({'学号':['201910010288','20191001730','201011192983'], '专业':['计算机系','金融系'，'空间系'],'成绩':[66,99,120]}) #表头 table=ff.create_table(data) #用plotly输出表格 pyplt(table,show_link=False) 处理结果： ​ 对一些用法的说明 函数 用法 data.at[行，列] 找到位置 data.iloc[0] 第一行的信息 data['xxx'] 'xxx'列的信息 用Pandas读写各种类型的文件 读取csv和表格 读：read_csv() 写：to_csv() read_csv()常用参数 参数 含义 sep/delimiter 列分隔符 header 列名，如果有自己的列名列表，传递None index_col 作为索引的列名 skiprows 要跳过的文件头行数 na_values 用于处理缺失数据的字符串 encoding 字符编码方式 举例： (GB2312是中国制定的中文编码，GBK是GB2312的拓展，CP936是在GB2312的基础上开发的汉字编码) import plotly as py from plotly import figure_factory as ff import pandas as pd import plotly.graph_objs as pygo pyplt=py.offline.plot # 离线模式 data=pd.read_csv('score.csv',encoding='GBK') #读取 table=ff.create_table(data) #用plotly输出表格 pyplt(table,show_link=False) 写网页文件 基本和上一个相同 import plotly as py from plotly import figure_factory as ff import pandas as pd import plotly.graph_objs as pygo pyplt=py.offline.plot # 离线模式 data=pd.read_csv('score.csv',encoding='GBK') #读取 table=ff.create_table(data) #用plotly输出表格 pyplt(table,filename='scoregp.html',show_link=False) 读写EXCAL 读：read_excal('文件名') 写：to_excal(‘文件名’) import plotly as py from plotly import figure_factory as ff import pandas as pd import plotly.graph_objs as pygo pyplt=py.offline.plot # 离线模式 data=pd.read_excel('score.xlsx') #读取 data['总评']=data['成绩']/120*65 data.to_excel('score.xlsx',index=0) 没有index=0： 有index=0："}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-11-25T13:35:18.000Z"}],["meta",{"property":"article:author","content":"Voyager"}],["meta",{"property":"article:modified_time","content":"2023-11-25T13:35:18.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-11-25T13:35:18.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Voyager\\",\\"url\\":\\"https://life-if-forever.gitee.io/voyager\\"}]}"]]},"headers":[{"level":2,"title":"pandas的使用","slug":"pandas的使用","link":"#pandas的使用","children":[]}],"git":{"createdTime":1700919318000,"updatedTime":1700919318000,"contributors":[{"name":"Voyager","email":"1241512309@qq.com","commits":1}]},"readingTime":{"minutes":1.53,"words":459},"filePathRelative":"blog/notion/python/pandas的使用.md","localizedDate":"2023年11月25日","excerpt":"<h2> pandas的使用</h2>\\n<ul>\\n<li>\\n<p><strong>DataFrame的使用</strong></p>\\n<ul>\\n<li>\\n<p>列表产生</p>\\n<div class=\\"language-python line-numbers-mode\\" data-ext=\\"py\\"><pre class=\\"language-python\\"><code><span class=\\"token keyword\\">import</span> plotly <span class=\\"token keyword\\">as</span> py\\n<span class=\\"token keyword\\">from</span> plotly <span class=\\"token keyword\\">import</span> figure_factory <span class=\\"token keyword\\">as</span> ff\\n<span class=\\"token keyword\\">import</span> pandas <span class=\\"token keyword\\">as</span> pd\\n\\npyplt<span class=\\"token operator\\">=</span>py<span class=\\"token punctuation\\">.</span>offline<span class=\\"token punctuation\\">.</span>plot  <span class=\\"token comment\\"># 离线模式</span>\\ndata<span class=\\"token operator\\">=</span>pd<span class=\\"token punctuation\\">.</span>DataFrame<span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">[</span><span class=\\"token string\\">\\"20191001730\\"</span><span class=\\"token punctuation\\">,</span><span class=\\"token string\\">\\"kx\\"</span><span class=\\"token punctuation\\">,</span><span class=\\"token string\\">\\"4.00\\"</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">,</span>\\n                   <span class=\\"token punctuation\\">[</span><span class=\\"token string\\">\\"20191000456\\"</span><span class=\\"token punctuation\\">,</span><span class=\\"token string\\">\\"fgy\\"</span><span class=\\"token punctuation\\">,</span><span class=\\"token string\\">\\"1.00\\"</span><span class=\\"token punctuation\\">]</span> <span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">,</span>\\n                  columns<span class=\\"token operator\\">=</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"学号\\"</span><span class=\\"token punctuation\\">,</span><span class=\\"token string\\">\\"姓名\\"</span><span class=\\"token punctuation\\">,</span><span class=\\"token string\\">\\"成绩\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span>  <span class=\\"token comment\\">#表头</span>\\ntable<span class=\\"token operator\\">=</span>ff<span class=\\"token punctuation\\">.</span>create_table<span class=\\"token punctuation\\">(</span>data<span class=\\"token punctuation\\">)</span>   <span class=\\"token comment\\">#用plotly输出表格</span>\\npyplt<span class=\\"token punctuation\\">(</span>table<span class=\\"token punctuation\\">,</span>show_link<span class=\\"token operator\\">=</span><span class=\\"token boolean\\">False</span><span class=\\"token punctuation\\">)</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div><p>处理结果：</p>\\n</li>\\n<li>\\n<p>字典产生</p>\\n<div class=\\"language-python line-numbers-mode\\" data-ext=\\"py\\"><pre class=\\"language-python\\"><code><span class=\\"token keyword\\">import</span> plotly <span class=\\"token keyword\\">as</span> py\\n<span class=\\"token keyword\\">from</span> plotly <span class=\\"token keyword\\">import</span> figure_factory <span class=\\"token keyword\\">as</span> ff\\n<span class=\\"token keyword\\">import</span> pandas <span class=\\"token keyword\\">as</span> pd\\n\\npyplt<span class=\\"token operator\\">=</span>py<span class=\\"token punctuation\\">.</span>offline<span class=\\"token punctuation\\">.</span>plot  <span class=\\"token comment\\"># 离线模式</span>\\ndata<span class=\\"token operator\\">=</span>pd<span class=\\"token punctuation\\">.</span>DataFrame<span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">{</span><span class=\\"token string\\">'学号'</span><span class=\\"token punctuation\\">:</span><span class=\\"token punctuation\\">[</span><span class=\\"token string\\">'201910010288'</span><span class=\\"token punctuation\\">,</span><span class=\\"token string\\">'20191001730'</span><span class=\\"token punctuation\\">,</span><span class=\\"token string\\">'201011192983'</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">,</span>\\n                  <span class=\\"token string\\">'专业'</span><span class=\\"token punctuation\\">:</span><span class=\\"token punctuation\\">[</span><span class=\\"token string\\">'计算机系'</span><span class=\\"token punctuation\\">,</span><span class=\\"token string\\">'金融系'</span>，<span class=\\"token string\\">'空间系'</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">,</span><span class=\\"token string\\">'成绩'</span><span class=\\"token punctuation\\">:</span><span class=\\"token punctuation\\">[</span><span class=\\"token number\\">66</span><span class=\\"token punctuation\\">,</span><span class=\\"token number\\">99</span><span class=\\"token punctuation\\">,</span><span class=\\"token number\\">120</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>  <span class=\\"token comment\\">#表头</span>\\ntable<span class=\\"token operator\\">=</span>ff<span class=\\"token punctuation\\">.</span>create_table<span class=\\"token punctuation\\">(</span>data<span class=\\"token punctuation\\">)</span>   <span class=\\"token comment\\">#用plotly输出表格</span>\\npyplt<span class=\\"token punctuation\\">(</span>table<span class=\\"token punctuation\\">,</span>show_link<span class=\\"token operator\\">=</span><span class=\\"token boolean\\">False</span><span class=\\"token punctuation\\">)</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div><p>处理结果：</p>\\n<p>​</p>\\n</li>\\n<li>\\n<p>对一些用法的说明</p>\\n<table>\\n<thead>\\n<tr>\\n<th>函数</th>\\n<th>用法</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td><a href=\\"http://data.at\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">data.at</a>[行，列]</td>\\n<td>找到位置</td>\\n</tr>\\n<tr>\\n<td>data.iloc[0]</td>\\n<td>第一行的信息</td>\\n</tr>\\n<tr>\\n<td>data['xxx']</td>\\n<td>'xxx'列的信息</td>\\n</tr>\\n</tbody>\\n</table>\\n</li>\\n</ul>\\n</li>\\n<li>\\n<p><strong>用Pandas读写各种类型的文件</strong></p>\\n<ul>\\n<li>\\n<p>读取csv和表格</p>\\n<p><strong>读：read_csv()</strong></p>\\n<p><strong>写：to_csv()</strong></p>\\n<ul>\\n<li>\\n<p>read_csv()常用参数</p>\\n<table>\\n<thead>\\n<tr>\\n<th>参数</th>\\n<th>含义</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>sep/delimiter</td>\\n<td>列分隔符</td>\\n</tr>\\n<tr>\\n<td>header</td>\\n<td>列名，如果有自己的列名列表，传递None</td>\\n</tr>\\n<tr>\\n<td>index_col</td>\\n<td>作为索引的列名</td>\\n</tr>\\n<tr>\\n<td>skiprows</td>\\n<td>要跳过的文件头行数</td>\\n</tr>\\n<tr>\\n<td>na_values</td>\\n<td>用于处理缺失数据的字符串</td>\\n</tr>\\n<tr>\\n<td>encoding</td>\\n<td>字符编码方式</td>\\n</tr>\\n</tbody>\\n</table>\\n</li>\\n</ul>\\n<p>举例：</p>\\n<p>(GB2312是中国制定的中文编码，GBK是GB2312的拓展，CP936是在GB2312的基础上开发的汉字编码)</p>\\n<div class=\\"language-python line-numbers-mode\\" data-ext=\\"py\\"><pre class=\\"language-python\\"><code><span class=\\"token keyword\\">import</span> plotly <span class=\\"token keyword\\">as</span> py\\n<span class=\\"token keyword\\">from</span> plotly <span class=\\"token keyword\\">import</span> figure_factory <span class=\\"token keyword\\">as</span> ff\\n<span class=\\"token keyword\\">import</span> pandas <span class=\\"token keyword\\">as</span> pd \\n<span class=\\"token keyword\\">import</span> plotly<span class=\\"token punctuation\\">.</span>graph_objs <span class=\\"token keyword\\">as</span> pygo\\n\\npyplt<span class=\\"token operator\\">=</span>py<span class=\\"token punctuation\\">.</span>offline<span class=\\"token punctuation\\">.</span>plot  <span class=\\"token comment\\"># 离线模式</span>\\ndata<span class=\\"token operator\\">=</span>pd<span class=\\"token punctuation\\">.</span>read_csv<span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'score.csv'</span><span class=\\"token punctuation\\">,</span>encoding<span class=\\"token operator\\">=</span><span class=\\"token string\\">'GBK'</span><span class=\\"token punctuation\\">)</span> <span class=\\"token comment\\">#读取</span>\\ntable<span class=\\"token operator\\">=</span>ff<span class=\\"token punctuation\\">.</span>create_table<span class=\\"token punctuation\\">(</span>data<span class=\\"token punctuation\\">)</span>   <span class=\\"token comment\\">#用plotly输出表格</span>\\npyplt<span class=\\"token punctuation\\">(</span>table<span class=\\"token punctuation\\">,</span>show_link<span class=\\"token operator\\">=</span><span class=\\"token boolean\\">False</span><span class=\\"token punctuation\\">)</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div></li>\\n<li>\\n<p>写网页文件</p>\\n<p>基本和上一个相同</p>\\n<div class=\\"language-python line-numbers-mode\\" data-ext=\\"py\\"><pre class=\\"language-python\\"><code><span class=\\"token keyword\\">import</span> plotly <span class=\\"token keyword\\">as</span> py\\n<span class=\\"token keyword\\">from</span> plotly <span class=\\"token keyword\\">import</span> figure_factory <span class=\\"token keyword\\">as</span> ff\\n<span class=\\"token keyword\\">import</span> pandas <span class=\\"token keyword\\">as</span> pd \\n<span class=\\"token keyword\\">import</span> plotly<span class=\\"token punctuation\\">.</span>graph_objs <span class=\\"token keyword\\">as</span> pygo\\n\\npyplt<span class=\\"token operator\\">=</span>py<span class=\\"token punctuation\\">.</span>offline<span class=\\"token punctuation\\">.</span>plot  <span class=\\"token comment\\"># 离线模式</span>\\ndata<span class=\\"token operator\\">=</span>pd<span class=\\"token punctuation\\">.</span>read_csv<span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'score.csv'</span><span class=\\"token punctuation\\">,</span>encoding<span class=\\"token operator\\">=</span><span class=\\"token string\\">'GBK'</span><span class=\\"token punctuation\\">)</span> <span class=\\"token comment\\">#读取</span>\\ntable<span class=\\"token operator\\">=</span>ff<span class=\\"token punctuation\\">.</span>create_table<span class=\\"token punctuation\\">(</span>data<span class=\\"token punctuation\\">)</span>   <span class=\\"token comment\\">#用plotly输出表格</span>\\npyplt<span class=\\"token punctuation\\">(</span>table<span class=\\"token punctuation\\">,</span>filename<span class=\\"token operator\\">=</span><span class=\\"token string\\">'scoregp.html'</span><span class=\\"token punctuation\\">,</span>show_link<span class=\\"token operator\\">=</span><span class=\\"token boolean\\">False</span><span class=\\"token punctuation\\">)</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div></li>\\n<li>\\n<p><strong>读写EXCAL</strong></p>\\n<p>读：read_excal('文件名')</p>\\n<p>写：to_excal(‘文件名’)</p>\\n<div class=\\"language-python line-numbers-mode\\" data-ext=\\"py\\"><pre class=\\"language-python\\"><code><span class=\\"token keyword\\">import</span> plotly <span class=\\"token keyword\\">as</span> py\\n<span class=\\"token keyword\\">from</span> plotly <span class=\\"token keyword\\">import</span> figure_factory <span class=\\"token keyword\\">as</span> ff\\n<span class=\\"token keyword\\">import</span> pandas <span class=\\"token keyword\\">as</span> pd \\n<span class=\\"token keyword\\">import</span> plotly<span class=\\"token punctuation\\">.</span>graph_objs <span class=\\"token keyword\\">as</span> pygo\\n\\npyplt<span class=\\"token operator\\">=</span>py<span class=\\"token punctuation\\">.</span>offline<span class=\\"token punctuation\\">.</span>plot  <span class=\\"token comment\\"># 离线模式</span>\\ndata<span class=\\"token operator\\">=</span>pd<span class=\\"token punctuation\\">.</span>read_excel<span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'score.xlsx'</span><span class=\\"token punctuation\\">)</span> <span class=\\"token comment\\">#读取</span>\\ndata<span class=\\"token punctuation\\">[</span><span class=\\"token string\\">'总评'</span><span class=\\"token punctuation\\">]</span><span class=\\"token operator\\">=</span>data<span class=\\"token punctuation\\">[</span><span class=\\"token string\\">'成绩'</span><span class=\\"token punctuation\\">]</span><span class=\\"token operator\\">/</span><span class=\\"token number\\">120</span><span class=\\"token operator\\">*</span><span class=\\"token number\\">65</span>\\ndata<span class=\\"token punctuation\\">.</span>to_excel<span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'score.xlsx'</span><span class=\\"token punctuation\\">,</span>index<span class=\\"token operator\\">=</span><span class=\\"token number\\">0</span><span class=\\"token punctuation\\">)</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div><p>没有index=0：</p>\\n<p>有index=0：</p>\\n</li>\\n</ul>\\n</li>\\n</ul>","autoDesc":true}`);export{n as data};
