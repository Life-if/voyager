import{_ as n,o as a,c as l,f as s,a as t,b as e}from"./app-745f9f7a.js";const r={},d=s('<h2 id="_2-6-1-集合的定义" tabindex="-1"><a class="header-anchor" href="#_2-6-1-集合的定义" aria-hidden="true">#</a> 2.6.1 集合的定义</h2><p><strong>集合</strong>是指一批元素的集合，在集合中，元素是具有<strong>唯一性</strong>的。</p><p>Python 中有两个可以表示集合的类型，一种是 <code>set</code>，另一种是 <code>frozenset</code>。<strong>区别在于，前者是可变类型，后者是不可变类型</strong>。集合中的元素都是<strong>不可变对象</strong>。</p><p>另外一点是，集合中的元素是没有顺序的。这也就是说，如果要求显示器显示一个集合，这个集合内元素的顺序和输入顺序不同。（不过一般是按照编码顺序来排序的）</p><h2 id="_2-6-2-集合的构造" tabindex="-1"><a class="header-anchor" href="#_2-6-2-集合的构造" aria-hidden="true">#</a> 2.6.2 集合的构造</h2><p>集合的构造主要有三种：</p><ol><li><p>使用<code>{元素1,…}</code>创建。</p></li><li><p>使用<code>set(可迭代对象)</code>或者<code>frozenset(可迭代对象)</code>生成。</p></li><li><p>使用描述式<code>{生成表达式}</code>生成，此时括号内只能由一组生成表达式。</p></li></ol><p>在生成过程中，填入其中的元素可以重复。Python 在生成的过程中会自动处理重复元素。</p><div class="hint-container warning"><p class="hint-container-title">注意</p><p>如果单独的<code>{}</code>，Python 会识别为空字典，而不是空集合。</p></div>',9),i=t("div",{class:"hint-container danger"},[t("p",{class:"hint-container-title"},"警告"),t("p",null,[e("对于重复元素的剔除，Python 采用的规则是"),t("code",null,"=="),e("操作。因此有时会有一些危险的情况如下，在工程中应当注意。")]),t("div",{class:"language-bash line-numbers-mode","data-ext":"sh"},[t("pre",{red:"",class:"language-bash"},[t("code",null,[t("span",{class:"token operator"},">>"),t("span",{class:"token operator"},">"),e(),t("span",{class:"token punctuation"},"{"),t("span",{class:"token number"},"1"),e(",True"),t("span",{class:"token punctuation"},"}"),e(`
`),t("span",{class:"token punctuation"},"{"),t("span",{class:"token number"},"1"),t("span",{class:"token punctuation"},"}"),e(`
`),t("span",{class:"token operator"},">>"),t("span",{class:"token operator"},">"),e(),t("span",{class:"token punctuation"},"{"),t("span",{class:"token number"},"1.0"),e(",1"),t("span",{class:"token punctuation"},"}"),e(`
`),t("span",{class:"token punctuation"},"{"),t("span",{class:"token number"},"1.0"),t("span",{class:"token punctuation"},"}"),e(`
`)])]),t("div",{class:"line-numbers","aria-hidden":"true"},[t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"})])])],-1),o=s('<h2 id="_2-6-3-集合的比较" tabindex="-1"><a class="header-anchor" href="#_2-6-3-集合的比较" aria-hidden="true">#</a> 2.6.3 集合的比较</h2><p>在数学里，如果一个集合的元素都属于另一集合，则称前者是后者的<strong>子集</strong>，或称后者是前者的<strong>超集</strong>。显然，每个集合都是其自身的子集和超集。如果一个集合是另一集合的子集，而且两个集合不等，那么它就是<strong>真子集</strong>，可以类似地定义<strong>真超集</strong>。</p><p>Python 用表示顺序的比较运算符表示这几个关系，有些运算还有采用点号记法的版本，如下所示：</p><table><thead><tr><th style="text-align:left;">运算</th><th style="text-align:center;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">s1 &lt;= s2<br>s1.issubset(s2)</td><td style="text-align:center;">当且仅当 s1 为 s2 的子集时得到 True</td></tr><tr><td style="text-align:left;">s1 &lt; s2</td><td style="text-align:center;">当且仅当 s1 为 s2 的真子集时得到 True</td></tr><tr><td style="text-align:left;">s1 &gt;= s2<br>s1.issuperset(s2)</td><td style="text-align:center;">检查 s1 是否为 s2 的超集</td></tr><tr><td style="text-align:left;">s1 &gt; s2</td><td style="text-align:center;">检查 s1 是否为 s2 的真超集</td></tr><tr><td style="text-align:left;">s1.isdisjoint(s2)</td><td style="text-align:center;">检查两个集合是否不相交，不相交就是没有公共元素</td></tr></tbody></table><div class="hint-container tip"><p class="hint-container-title">提示</p><p>set 对象可以与 frozenset 对象比较，</p></div><h2 id="_2-6-4-集合的操作" tabindex="-1"><a class="header-anchor" href="#_2-6-4-集合的操作" aria-hidden="true">#</a> 2.6.4 集合的操作</h2><p>常见的操作如下：</p><table><thead><tr><th style="text-align:left;">操作</th><th style="text-align:center;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">s1.union(s2,...)<br>s1|s2|...</td><td style="text-align:center;">产生所有参数集合的并集。元素属于并集，当且仅当它属加运算的某个集合</td></tr><tr><td style="text-align:left;">s1.intersection(S2, ...)<br>s1&amp;s2&amp;...</td><td style="text-align:center;">产生所有参数集合的交集。元素属于交集，当且仅当它属干加运算的每个集合</td></tr><tr><td style="text-align:left;">s1.difference(s2, ...)<br>s1-s2-...</td><td style="text-align:center;">产生的集合里包含属于第一个集合不属于其他集合的所有元素，称为差集</td></tr><tr><td style="text-align:left;">s1.symmetric_difference(s2)</td><td style="text-align:center;">产生 s1 和 s2 的对称差集，其中包含所有属于 s1 但不属于 s2 及属于 s2 不属于 s1 的元素</td></tr><tr><td style="text-align:left;">s.add(x)</td><td style="text-align:center;">将元素 x 加入集合 s</td></tr><tr><td style="text-align:left;">s.remove(x)</td><td style="text-align:center;">从 s 里删除元素 x，在 s 没有 x 时报错</td></tr><tr><td style="text-align:left;">s.discard(x)</td><td style="text-align:center;">如果 s 里有 x 就抛弃它，没有 x 时什么也不做</td></tr><tr><td style="text-align:left;">s.pop()</td><td style="text-align:center;">从 s 里删除某个(任意的)元素并返回它，具体元素由集合内部确定。如果操作时 s 为空则报错</td></tr><tr><td style="text-align:left;">s.clear()</td><td style="text-align:center;">清除 s 里的所有元素</td></tr></tbody></table><div class="hint-container tip"><p class="hint-container-title">提示</p><p>集合的交并差运算中，函数形式的参数可以是任意形式的可迭代对象，而不只是集合。</p></div>',9),c=[d,i,o];function p(h,g){return a(),l("div",null,c)}const u=n(r,[["render",p],["__file","06.html.vue"]]);export{u as default};
